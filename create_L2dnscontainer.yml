---
- hosts: localhost
  gather_facts: no
  become: yes
  ignore_errors: yes
  vars:
          docker_image: dns_centos
          docker_filepath: /home/ece792/project/DNS-as-a-Service-VPC/containerproject/dnsconf
          packages:
                  - docker
          provider_namespace: provider_ns
  vars_files:
          - l2dns_vars.yml

  tasks:
          - debug:
                  msg: "{{ dns }}"

          - name: Install required packages
            apt:
                    name: "{{ packages }}"

          - name: Creating L2 DNS switch for each vpc
            command: brctl addbr {{ item.key }}L2DNS
            with_dict: "{{ dns }}"

          - name: Defining L2DNS network
            virt_net:
                    command: define
                    name: "{{ item.key }}L2DNS"
                    xml: "{{ lookup('template', 'templates/L2DNSbridge_template.xml') }}"
            with_dict: "{{ dns }}"

          - name: Starting the L2DNS network
            virt_net:
                    command: start
                    name: "{{ item.key }}L2DNS"
            with_dict: "{{ dns }}"

          - name: Creating the vethpair to attach bridge to tenant namespace
            command: ip link add {{ item.key }}L2DNSif1 type veth peer name {{ item.key }}L2DNSif2
            with_dict: "{{ dns }}"

          - name: Set the bridge in up mode
            command: ip link set {{ item.key }}L2DNS up
            with_dict: "{{ dns }}"

          - name: Attach vethpair interface to bridge
            command: brctl addif {{ item.key }}L2DNS {{ item.key }}L2DNSif2
            with_dict: "{{ dns }}"

          - name: Attach vethpair interface to namespace
            command: ip link set {{ item.key }}L2DNSif1 netns {{ item.key }}
            with_dict: "{{ dns }}"

          - name: Making the interfaces attached to bridge up
            command: ip link set {{ item.key }}L2DNSif2 up
            with_dict: "{{ dns }}"

          - name: Making the interfaces attached to namespaces up
            command: ip netns exec {{ item.key }} ip link set {{ item.key }}L2DNSif1 up
            with_dict: "{{ dns }}"

          - name: Assign IP to vethpair interface inside vpc namespace
            command: ip netns exec {{ item.key }} ip addr add {{ item.value.provider_gateway }} dev {{ item.key }}L2DNSif1
            with_dict: "{{ dns }}"

          - name: Add ip table rules NAT inside vpc namespace for the DNS subnet
            command: ip netns exec {{ item.key }} iptables -t nat -I POSTROUTING 1 -s {{item.value.DNS_subnetrange}} ! -d {{item.value.DNS_subnetrange}} -j MASQUERADE
            with_dict: "{{ dns }}"

          - name: Provide DHCP by running DNSMASQ
            command: ip netns exec {{ item.key }} dnsmasq --interface={{ item.key }}L2DNSif1 --except-interface=lo --bind-interfaces --dhcp-range={{ item.value.dhcp_range }}
            with_dict: "{{ dns }}"
            ignore_errors: true

          - name: Adding routes for L2 DNS in provider namespace
            command: ip netns exec {{ provider_namespace }} ip route add {{ item.value.DNS_subnetrange }} via {{ item.value.vpc_gateway }}
            with_dict: "{{ dns }}"


          - name: Create docker image if it does not exist
            docker_image:
                    path: "{{ docker_filepath }}"
                    name: "{{ docker_image }}"
                    state: present

          - name: Create shared volume in the hypervisor
            file:
                    path: "/srv/docker/{{ dns[item].dns_name }}1"
                    state: directory
                    mode: 0777
            with_items: "{{ dns | list }}"

          - name: Create shared volume in the hypervisor for HA
            file:
                    path: "/srv/docker/{{ dns[item].dns_name }}2"
                    state: directory
                    mode: 0777
            with_items: "{{ dns | list }}"

          - name: Get the IP addresses assigned of L1DNS container
            command: "docker inspect -f {%raw%} '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}'{%endraw%} {{dns[item].parent_dns}}"
            with_items: "{{ dns | list }}"
            register: parent_dns_ip

          - name: Debug parent dns ip
            debug:
                    msg: "Parent DNS IP: {{parent_dns_ip.results[0].stdout}}"

          - name: Create and start container for dns if not already present
            docker_container:
                    name: "{{ dns[item].dns_name }}1"
                    image: "{{ docker_image }}"
                    state: started
                    privileged: yes
                    interactive: yes
                    tty: yes
                    detach: yes
                    dns_servers:
                            - "{{ parent_dns_ip.results[0].stdout }}"
                    volumes:
                            - "/srv/docker/{{ dns[item].dns_name }}1:/named"
                    published_ports:
                            - "{{dns[item].publish_port1}}:{{dns[item].publish_port1}}/udp"
            with_items: "{{ dns | list }}"
                           
          - name: Create and start HA containers for dns if not already present
            docker_container:
                    name: "{{ dns[item].dns_name }}2"
                    image: "{{ docker_image }}"
                    state: started
                    privileged: yes
                    interactive: yes
                    tty: yes
                    detach: yes
                    dns_servers:
                            - "{{ parent_dns_ip.results[0].stdout }}"
                    volumes:
                            - "/srv/docker/{{ dns[item].dns_name }}2:/named"
                    published_ports:
                            - "{{dns[item].publish_port2}}:{{dns[item].publish_port2}}/udp"
            with_items: "{{ dns | list }}"

          - name: Create vethpairs to connect containers to bridges
            command: 'ip link add {{ dns[item].dns_name }}1vif1 type veth peer name {{ dns[item].dns_name }}1vif2'
            with_items: "{{ dns | list }}"

          - name: Create vethpairs to connect containers to bridges
            command: 'ip link add {{ dns[item].dns_name }}2vif1 type veth peer name {{ dns[item].dns_name }}2vif2'
            with_items: "{{ dns | list }}"

          - name: Attach vethpair interfaces to the bridge
            command: 'brctl addif {{ item.key }}L2DNS {{ item.value.dns_name}}1vif2'
            with_dict: "{{ dns }}"

          - name: Attach vethpair interfaces to the bridge
            command: 'brctl addif {{ item.key }}L2DNS {{ item.value.dns_name}}2vif2'
            with_dict: "{{ dns }}"

          - name: Attach vethpair interfaces to the containers
            shell: ip link set {{ dns[item].dns_name }}1vif1 netns $(sudo docker inspect -f {%raw%}'{{.State.Pid}}'{%endraw%} "{{ dns[item].dns_name }}1")
            with_items: "{{ dns | list }}"

          - name: Attach vethpair interfaces to the HA containers
            shell: ip link set {{ dns[item].dns_name }}2vif1 netns $(sudo docker inspect -f {%raw%}'{{.State.Pid}}'{%endraw%} "{{ dns[item].dns_name }}2")
            with_items: "{{ dns | list }}"

          - name: Making the vethpairs up in the containers
            command: docker exec --privileged "{{ dns[item].dns_name }}1" ip link set {{ dns[item].dns_name }}1vif1 up
            with_items: "{{ dns | list }}"

          - name: Making the vethpairs up in the containers
            command: docker exec --privileged "{{ dns[item].dns_name }}2" ip link set {{ dns[item].dns_name }}2vif1 up
            with_items: "{{ dns | list }}"

          - name: Making the vethpairs attached to the bridge up
            command: ip link set {{ item.value.dns_name}}1vif2 up
            with_dict: "{{ dns }}"

          - name: Making the vethpairs attached to the bridge up
            command: ip link set {{ item.value.dns_name}}2vif2 up
            with_dict: "{{ dns }}"

          - name: Running dhclient in the containers
            command: docker exec --privileged "{{ dns[item].dns_name }}1" dhclient {{ dns[item].dns_name }}1vif1
            with_items: "{{ dns | list }}"

          - name: Running dhclient in the containers
            command: docker exec --privileged "{{ dns[item].dns_name }}2" dhclient {{ dns[item].dns_name }}2vif1
            with_items: "{{ dns | list }}"

